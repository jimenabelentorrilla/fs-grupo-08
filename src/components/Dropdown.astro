---

interface Props{
    name : string;
    options :[string] ;
    errorMessage : string
}


const { name, options, errorMessage } = Astro.props;
---

<select class={name} name={name} id={name} required >
  <option class="option" value="">Seleccione:</option>
  {
    options.map(option => (
      <option class="option" value={option}>{option}</option>
  ))}
</select>

<style>
 select {
  width: 100%;
  padding: 1rem;
  font-size: 1rem;
  font-family: var(--font-family-text);
  background-color: #F9FAFB;
  color: #111827;
  border: 1px solid #E5E7EB;
  border-radius: 1rem; /* M√ÅS redondeado */
  transition: border 0.3s ease, box-shadow 0.3s ease;
  appearance: none;
  background-image: url('data:image/svg+xml;charset=UTF-8,<svg fill="gray" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M7 10l5 5 5-5z"/></svg>');
  background-repeat: no-repeat;
  background-position: right 1rem center;
  background-size: 1.25rem;
}

select:focus {
  border-color: var(--color-gold-cta);
  outline: none;
  box-shadow: 0 0 0 2px color-mix(in srgb, var(--color-gold-cta) 30%, white);
}
.option {
  font-size: 1rem;
  font-family: var(--font-family-text);
  color: #111827;
  background-color: white;
  text-align: left;
}

/* Responsive */
@media screen and (min-width: 768px) {
  select {
    font-size: 1rem;
  }
}

@media screen and (min-width: 992px) {
  select {
    font-size: 1.1rem;
  }
}
</style>